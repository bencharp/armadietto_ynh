#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --time --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
is_public=$(ynh_app_setting_get $app is_public)
is_signup=$(ynh_app_setting_get $app is_signu)
final_path=$(ynh_app_setting_get $app final_path)

#=================================================
# CHECK VERSION
#=================================================

### This helper will compare the version of the currently installed app and the version of the upstream package.
### $upgrade_type can have 2 different values
### - UPGRADE_APP if the upstream app version has changed
### - UPGRADE_PACKAGE if only the YunoHost package has changed
### ynh_check_app_version_changed will stop the upgrade if the app is up to date.
### UPGRADE_APP should be used to upgrade the core app only if there's an upgrade to do.
upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --time --weight=1

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
    ynh_app_setting_set $app is_public 1
    is_public=1
elif [ "$is_public" = "No" ]; then
    ynh_app_setting_set $app is_public 0
    is_public=0
fi

# Fix is_signup as a boolean value
if [ "$is_signup" = "Yes" ]; then
    ynh_app_setting_set $app is_signup 1
    is_signup=1
elif [ "$is_public" = "No" ]; then
    ynh_app_setting_set $app is_signup 0
    is_signup=0
fi

# If final_path doesn't exist, create it
if [ -z $final_path ]; then
    final_path=/var/www/$app
    ynh_app_setting_set $app final_path $final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --time --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
    # restore it if the upgrade fails
    ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..." --time --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
# ynh_script_progression --message="Upgrading dependencies..." --time --weight=1

nodejs_version=10

# ynh_install_nodejs -n $nodejs_version

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --time --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# NODE SERVER CONFIGURATION
#=================================================




#=================================================
# SPECIFIC UPGRADE
#=================================================
# ...
#=================================================

### Verify the checksum of a file, stored by `ynh_store_file_checksum` in the install script.
### And create a backup of this file if the checksum is different. So the file will be backed up if the admin had modified it.
ynh_backup_if_checksum_is_different --file="$final_path/CONFIG_FILE"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$final_path/CONFIG_FILE"

#=================================================
# STOP ARMADIETTO
#=================================================



#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --time --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --time --weight=1

# Create a dedicated systemd config
ynh_replace_string "__NODEPATH__" "$nodejs_path"      "../conf/systemd.service"
ynh_replace_string "__ENV_PATH__" "$PATH"             "../conf/systemd.service"
ynh_replace_string "__FINALPATH__" "$final_path"      "../conf/systemd.service"

ynh_add_systemd_config

PATH=$nodejs_path:$PATH

#=================================================
# SETUP ARMADIETTO OPTIONS & CREATE DIRECTORY FOR DATA
#=================================================

# Stop Armadietto
ynh_systemd_action --service_name=$app --action=stop

# Define armadietto module path
modulepath="$node_version_path/$nodejs_version/lib/node_modules/armadietto/lib/"

# Define app's data directory
datadir="/home/yunohost.app/${app}/storage"

# Create app folders
mkdir -p "$datadir"

ynh_replace_string "__MODULE_PATH__"    "$modulepath"   "../conf/server.js"
ynh_replace_string "__DATADIR__"        "$datadir"      "../conf/server.js"
ynh_replace_string "__PORT__"           "$port"   "../conf/server.js"

cp ../conf/server.js "$final_path/server.js"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R $app:$app "$final_path"
chmod 0700 $datadir && chown $app:$app $datadir

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Upgrading SSOwat configuration..." --time --weight=1

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# START ARMADIETTO
#=================================================
ynh_script_progression --message="Start armadietto web server..."  --time --weight=1

ynh_systemd_action --service_name=$app --action=start

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --time --last
